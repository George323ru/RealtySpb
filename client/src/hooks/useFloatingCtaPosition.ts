import { useState, useEffect } from 'react';
import { useIsMobile } from './use-mobile';

interface FloatingCtaPositionConfig {
  /** –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –Ω–∞ –º–æ–±–∏–ª–µ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö) */
  mobileBottomOffset: number;
  /** –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö) */
  desktopBottomOffset: number;
  /** –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö) */
  rightOffset: number;
  /** –í–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º */
  debug?: boolean;
}

const DEFAULT_CONFIG: FloatingCtaPositionConfig = {
  mobileBottomOffset: 120, // –ó–∞–≤–µ–¥–æ–º–æ –±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –º–æ–±–∏–ª–µ
  desktopBottomOffset: 24,
  rightOffset: 24,
  debug: false
};

export function useFloatingCtaPosition(config: Partial<FloatingCtaPositionConfig> = {}) {
  const isMobile = useIsMobile();
  const finalConfig = { ...DEFAULT_CONFIG, ...config };
  
  const [mobileNavHeight, setMobileNavHeight] = useState(0);

  useEffect(() => {
    if (!isMobile) return;

    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const measureNavHeight = () => {
      const mobileNav = document.querySelector('[data-mobile-nav]');
      if (mobileNav) {
        const height = mobileNav.getBoundingClientRect().height;
        setMobileNavHeight(height);
        
        if (finalConfig.debug) {
          console.log('üîç Mobile nav height measured:', height + 'px');
        }
      }
    };

    // –ò–∑–º–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    measureNavHeight();
    const timer = setTimeout(measureNavHeight, 100);

    return () => clearTimeout(timer);
  }, [isMobile, finalConfig.debug]);

  const bottomOffset = isMobile 
    ? Math.max(finalConfig.mobileBottomOffset, mobileNavHeight + 20) // –º–∏–Ω–∏–º—É–º 20px –Ω–∞–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    : finalConfig.desktopBottomOffset;

  const position = {
    position: 'fixed' as const,
    bottom: `${bottomOffset}px`,
    right: `${finalConfig.rightOffset}px`,
    zIndex: 50,
  };

  if (finalConfig.debug) {
    console.log('üì± CTA Position Debug:', {
      isMobile,
      mobileNavHeight,
      bottomOffset,
      position
    });
  }

  return {
    position,
    bottomOffset,
    isMobile,
    mobileNavHeight,
    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    updateConfig: (newConfig: Partial<FloatingCtaPositionConfig>) => ({ ...finalConfig, ...newConfig })
  };
} 